from nanoget import get_input
from argparse import ArgumentParser
from nanoplot import utils
from .version import __version__
from nanoplotter import check_valid_time_and_sort, Plot
from os import path
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np


def main():
    args = get_args()
    merged_df = get_input(source="summary", files=args.summary).set_index("readIDs") \
        .merge(right=get_input(source="bam", files=args.bam).set_index("readIDs"),
               how="left",
               left_index=True,
               right_index=True)
    plot_retrotect(df=merged_df,
                   path=path.join(args.outdir, args.prefix),
                   figformat=args.format,
                   title=args.title,
                   hours=args.hours)
    merged_df.dropna(axis="index", how="any").sort_values(by="start_time").to_csv(
        path_or_buf=path.join(args.outdir, args.prefix) + "Retrotect_details.txt.gz",
        sep="\t",
        columns=["start_time"],
        compression='gzip')


def get_args():
    epilog = """"""
    parser = ArgumentParser(
        description="Get detection curve of nanopore experiment.",
        epilog=epilog,
        formatter_class=utils.custom_formatter,
        add_help=False)
    general = parser.add_argument_group(
        title='General options')
    general.add_argument("-h", "--help",
                         action="help",
                         help="show the help and exit")
    general.add_argument("-v", "--version",
                         help="Print version and exit.",
                         action="version",
                         version='NanoComp {}'.format(__version__))
    general.add_argument("-t", "--threads",
                         help="Set the allowed number of threads to be used by the script",
                         default=4,
                         type=int)
    general.add_argument("-o", "--outdir",
                         help="Specify directory in which output has to be created.",
                         default=".")
    general.add_argument("-p", "--prefix",
                         help="Specify an optional prefix to be used for the output files.",
                         default="",
                         type=str)
    general.add_argument("--verbose",
                         help="Write log messages also to terminal.",
                         action="store_true")
    visual = parser.add_argument_group(
        title='Options for customizing the plots created')
    visual.add_argument("-f", "--format",
                        help="Specify the output format of the plots.",
                        default="png",
                        type=str,
                        choices=['eps', 'jpeg', 'jpg', 'pdf', 'pgf', 'png', 'ps',
                                 'raw', 'rgba', 'svg', 'svgz', 'tif', 'tiff'])
    visual.add_argument("--title",
                        help="Add a title to all plots, requires quoting if using spaces",
                        type=str,
                        default=None)
    visual.add_argument("--hours",
                        help="How many hours to plot in the graph",
                        type=int,
                        default=8)
    target = parser.add_argument_group(
        title="Input data sources, requires a bam and a summary file.")
    target.add_argument("--summary",
                        help="Data is a summary file generated by albacore.",
                        nargs='+',
                        metavar="files",
                        required=True)
    target.add_argument("--bam",
                        help="Data as a sorted bam file.",
                        nargs='+',
                        metavar="files",
                        required=True)
    return parser.parse_args()


def plot_retrotect(df, path, figformat="png", title=None, hours=8):
    dfs = check_valid_time_and_sort(
        df=df,
        timescol="start_time",
        days=hours / 24,
        warning=False)
    dfs["start_time"] = dfs["start_time"].astype('timedelta64[m]')  # ?! dtype float64

    cum_yield_reads = Plot(
        path=path + "CumulativeYieldPlot_NumberOfReads." + figformat,
        title="Cumulative yield")
    ax = sns.regplot(
        x=dfs['start_time'],
        y=np.log10(dfs['index'] + 1),
        x_ci=None,
        fit_reg=False,
        color="blue",
        scatter_kws={"s": 1})
    aligned_df = dfs.drop('index', axis=1) \
        .dropna(axis="index", how="any") \
        .reset_index(drop=True) \
        .reset_index()
    ax = sns.regplot(
        x=aligned_df['start_time'],
        y=np.log10(aligned_df["index"] + 1),
        x_ci=None,
        fit_reg=False,
        color="red",
        scatter_kws={"s": 1},
        ax=ax)
    yticks = [10**i for i in range(10) if not 10**i > 10 * dfs["index"].max()]
    ax.set(
        xlabel='Run time (minutes)',
        yticks=np.log10(yticks),
        yticklabels=yticks,
        ylabel='Cumulative yield in log transformed number of reads',
        title=title or cum_yield_reads.title)
    fig = ax.get_figure()
    cum_yield_reads.fig = fig
    fig.savefig(cum_yield_reads.path, format=figformat, dpi=100, bbox_inches="tight")
    plt.close("all")


if __name__ == '__main__':
    main()
